// TOKEN AUTHENTICATION MIDDLEWARE

// verifies if token given to client is valid
// visit https://jwt.io to understand the token structure

const jwt = require("jsonwebtoken");
const prisma = require("../config/prisma");

function authenticateToken(req, res, next) {
    // get token from header ("Bearer <token>" format)
    const authHeader = req.headers["authorization"];

    // extract token sequence
    const token = authHeader && authHeader.split(" ")[1];

    // if token does not exist
    // 403: forbidden/
    if (token == null) return res.status(403).json({ message: "Token not found. Please login to access the previous page" });

    // check if token has been generated by server
    jwt.verify(token, process.env.TOKEN, async (err, payload) => {
        // token data is received in payload
        // console.log(err);

        // if token is not valid
        // 401: unauthenticated/
        if (err) return res.status(401).json({ message: "Invalid token. Please login to access the previous page" });

        // if token is valid
        // save email and look for user in database
        const email = payload.data;

        const user = await prisma.user.findUnique({
            where: {
                email,
            },
        });

        // console.log(user);

        // if user does not exist
        // 404: not found/"User not found"
        if (!user) {
            console.log("404");
            return res.status(404).json({ message: "User not found" });
        }

        // if user exists
        // save user informations
        req.user = user;

        // go to next middleware (show user profile/info)
        next();
    });
}

// module.exports = { authenticateToken };
export default authenticateToken;
