// Prisma database model

// run prisma MIGRATION after every change with "npx prisma migrate dev --name init"
// DO NOT DELETE migration files

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// define database tables and columns

model User {
    id       Int    @id @default(autoincrement()) // unique user ID
    email    String @unique // unique user email address
    password String

    // automatically give free booster to user
    nextBooster String @default("0") // date (in milliseconds) of next booster / automatically give free booster on signup

    // automatically create user profile
    profile   Profile @relation(fields: [profileId], references: [id])
    profileId Int     @unique

    // friends Friend[] @relation(name: "Friends")
    cards Card[]

    settings   Settings @relation(fields: [settingsId], references: [id])
    settingsId Int      @unique
}

model Profile {
    id        Int       @id @default(autoincrement())
    name      String    @unique
    age       Int
    gender    Gender    @default(Unknown)
    biography String    @default("Hello, I like Hogwarts Club!")
    icon      Sentiment @default(Satisfied)
    color     String    @default("#ffffff")
    joinedOn  DateTime  @default(now())

    user User?
}

enum Gender {
    Unknown
    Male
    Female
    NonBinary
}

enum Sentiment {
    Satisfied
    Dissatisfied
    Neutral
    Sad
    Excited
    Calm
    Stressed
    Frustrated
    Content
    Worried
}

// model Friend {
//     id       Int              @id @default(autoincrement())
//     status   FriendshipStatus
//     userId   Int
//     friendId Int
//     user     User             @relation("Friends", fields: [userId], references: [id]) // verify if sending user exists

//     @@unique([userId, friendId])
// }

model Card {
    id         Int // this id does not identify the entry itself but identifies a card in the lainocs API
    quantity   Int     @default(1)
    isFavorite Boolean @default(false)

    // define owner of card
    owner   User @relation(fields: [ownerId], references: [id])
    ownerId Int

    // define unique card-owner relationship
    // there can only be one record about this card owned by this user
    @@id([id, ownerId])
}

model Trade {
    id          Int    @id @default(autoincrement())
    userId      Int
    traderId    Int
    cardInId    Int
    cardOutId   Int
    tradeStatus Status
}

enum Status {
    PENDING
    RECEIVED
    ACCEPTED
}

model Settings {
    id Int @id @default(autoincrement())

    showCollection Boolean @default(true)

    User User?
}
